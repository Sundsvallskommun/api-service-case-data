package se.sundsvall.casedata.integration.landandexploitation;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.zalando.problem.Status.SERVICE_UNAVAILABLE;
import static se.sundsvall.casedata.TestUtil.createErrand;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.zalando.problem.AbstractThrowableProblem;
import org.zalando.problem.Problem;

import generated.se.sundsvall.parkingpermit.StartProcessResponse;

@ExtendWith(MockitoExtension.class)
class LandAndExploitationIntegrationTest {

	@Mock
	private LandAndExploitationClient landAndExploitationClient;

	@InjectMocks
	private LandAndExploitationIntegration landAndExploitationIntegration;

	@Test
	void startProcessTest() {
		final var errand = createErrand();
		final var response = new StartProcessResponse();
		when(landAndExploitationClient.startProcess(errand.getId())).thenReturn(response);

		var result = landAndExploitationIntegration.startProcess(errand);

		assertThat(result).isEqualTo(response);
		verify(landAndExploitationClient).startProcess(errand.getId());
	}

	@Test
	void startProcess_whenThrowsTest() {
		final var errand = createErrand();
		when(landAndExploitationClient.startProcess(errand.getId())).thenThrow(new AbstractThrowableProblem() {
		});

		assertThatThrownBy(() -> landAndExploitationIntegration.startProcess(errand))
			.isInstanceOf(Problem.class)
			.hasMessage("Service Unavailable: Unexpected response from ProcessEngine API.")
			.hasFieldOrPropertyWithValue("status", SERVICE_UNAVAILABLE);

		verify(landAndExploitationClient).startProcess(errand.getId());
	}

	@Test
	void updateProcessTest() {
		final var errand = createErrand();
		landAndExploitationIntegration.updateProcess(errand);

		verify(landAndExploitationClient).updateProcess(errand.getProcessId());
	}

	@Test
	void updateProcess_whenThrowsTest() {
		final var errand = createErrand();
		when(landAndExploitationClient.updateProcess(errand.getProcessId())).thenThrow(new AbstractThrowableProblem() {
		});

		assertThatThrownBy(() -> landAndExploitationIntegration.updateProcess(errand))
			.isInstanceOf(Problem.class)
			.hasMessage("Service Unavailable: Unexpected response from ProcessEngine API.")
			.hasFieldOrPropertyWithValue("status", SERVICE_UNAVAILABLE);

		verify(landAndExploitationClient).updateProcess(errand.getProcessId());
	}
}
